{% extends 'base.html.twig' %}

{% block title %}Ficha do Pet - {{ pet.nome }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    
    <style>
        /* Estilos personalizados da página */
        body { background-color: #f8f9fa; font-family: 'Inter', sans-serif; }
        .main-card, .info-card {
            background: #fff;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            border: 1px solid #e9ecef;
            height: 100%;
        }
        .info-card { padding: 30px; }
        .info-card h5 { font-size: 1.5rem; font-weight: 600; }
        .pet-avatar { width: 110px; height: 110px; object-fit: cover; border-radius: 50%; border: 4px solid #e9ecef; }
        .debt-tag { background-color: #dc3545; color: white; padding: 8px 15px; border-radius: 8px; font-size: 1rem; font-weight: bold; display: inline-block; }
        .nav-tabs .nav-link { color: #6c757d; font-weight: 500; border: none; border-bottom: 3px solid transparent; }
        .nav-tabs .nav-link.active { color: #0d6efd; background-color: #fff; border-color: #dee2e6 #dee2e6 #0d6efd; font-weight: bold; }
        .timeline { position: relative; padding-left: 35px; list-style: none; }
        .timeline:before { content: ''; position: absolute; left: 12px; top: 5px; bottom: 5px; width: 3px; background: #e9ecef; border-radius: 2px; }
        .timeline-item { position: relative; margin-bottom: 25px; }
        .timeline-icon { position: absolute; left: -32px; top: 0; width: 45px; height: 45px; border-radius: 50%; background: #fff; border: 3px solid #e9ecef; color: #495057; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 1.1rem; }
        .timeline-content { transition: border-color 0.3s; }
        .timeline-content .timeline-date { font-size: 0.85em; color: #dc3545; font-weight: bold; margin-bottom: 4px; }
        a.timeline-text { font-size: 1rem; font-weight: 500; color: #343a40; text-decoration: none; display: block; }
        a.timeline-text:hover { color: #0d6efd; }
        .action-grid .btn { display: flex; flex-direction: column; align-items: center; justify-content: center; width: 100%; height: 100px; font-size: 0.9rem; font-weight: bold; color: white; border-radius: 10px; border: none; transition: all 0.2s ease; }
        .action-grid .btn:hover { transform: translateY(-4px); box-shadow: 0 6px 15px rgba(0,0,0,0.15); }
        .action-grid .btn i { font-size: 2rem; margin-bottom: 8px; }
        .form-view-container { border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; background-color: #fdfdff; }
        .ql-editor { min-height: 180px; }

        /* Styles for the new main service display container (the big quadro) */
        #service-display-container {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            background-color: #fdfdff;
        }

        /* Styles for individual service detail cards (each service's quadro) */
        .service-detail-card {
            border: 1px solid #dee2e6; /* Base border */
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px; /* Spacing between cards (if you ever show multiple) */
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }

        /* Quill display area within service-detail-card */
        /* This ensures the displayed Quill content looks clean */
        .service-detail-content .ql-editor {
            min-height: auto; /* Allow content to dictate height */
            padding: 0; /* Remove Quill's default padding for display */
            font-size: 1rem;
            overflow-y: auto;
            max-height: 400px; /* Max height before scrolling */
            word-wrap: break-word;
        }
        /* Specific border colors for service types */
        .service-detail-card.border-primary { border-left: 5px solid var(--bs-primary); } /* Consulta */
        .service-detail-card.border-success { border-left: 5px solid var(--bs-success); } /* Retorno */
        .service-detail-card.border-warning { border-left: 5px solid var(--bs-warning); } /* Vacina */
        .service-detail-card.border-purple { border-left: 5px solid #6f42c1; } /* Receita (custom color) */
        /* Add more as needed for other types like Internação, Patologia, Exame, etc. */

        /* Classe customizada apenas para a cor roxa, que não é padrão no Bootstrap */
        .border-purple {
            --bs-border-color: #6f42c1;
        }
    </style>
{% endblock %}

{% block body %}
{% set total_debitos = 0 %}
{% for f in financeiro %}{% set total_debitos = total_debitos + f.valor %}{% endfor %}

<div class="container-fluid my-4">
    <div class="row mb-4">
        <div class="col-lg-6 mb-4 mb-lg-0">
            <div class="info-card">
                <h5>{{ pet.dono_nome|default('Tutor não vinculado') }} {% if pet.dono_nome %}<small class="text-muted fw-normal">({{ pet.dono_id }})</small>{% endif %}</h5>
                {% if pet.dono_telefone is defined and pet.dono_telefone %}<p class="text-muted"><i class="fas fa-mobile-alt me-2"></i>{{ pet.dono_telefone }}</p>{% endif %}
                {% if total_debitos > 0 %}<span class="debt-tag">Saldo devedor de R$ {{ total_debitos|number_format(2, ',', '.') }}</span>{% endif %}
            </div>
        </div>
        <div class="col-lg-6">
            <div class="info-card d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="mb-2 me-3">{{ pet.nome }} <small class="text-muted fw-normal">({{ pet.id }})</small></h5>
                    <p class="text-muted mb-1 fs-5">{{ pet.raca }} - {{ pet.sexo }}</p>
                    <p class="text-muted mb-0 fs-5">{{ pet.idade }} anos</p>
                </div>
                <img src="{{ asset('images/pet.png') }}" alt="Avatar do Pet" class="pet-avatar">
            </div>
        </div>
    </div>
    <hr>

    <div class="row">
        <div class="col-lg-3 mb-4 mb-lg-0">
            <div class="main-card sales-card">
                <ul class="nav nav-tabs" id="salesTab" role="tablist">
                    <li class="nav-item" role="presentation"><button class="nav-link active" data-bs-toggle="tab" data-bs-target="#venda" type="button" role="tab" aria-controls="venda" aria-selected="true">Venda</button></li>
                    <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#orcamentos" type="button" role="tab" aria-controls="orcamentos" aria-selected="false">Orçamentos</button></li>
                </ul>
                <div class="tab-content pt-4" id="salesTabContent">
                    <div class="tab-pane fade show active" id="venda" role="tabpanel" aria-labelledby="venda-tab">
                        <div class="d-flex justify-content-end my-2"><button class="btn btn-success btn-sm"><i class="fas fa-plus me-1"></i> Adicionar</button></div>
                        {% for f in financeiro %}
                            <div class="d-flex justify-content-between align-items-center border-bottom pb-2 mb-2">
                                <div>
                                    <p class="mb-0 fw-bold">{{ f.descricao }}</p>
                                    <small class="text-muted">{{ f.data|date('d/m/Y') }}</small>
                                </div>
                                <p class="mb-0 fw-bold">R$ {{ f.valor|number_format(2, ',', '.') }}</p>
                            </div>
                        {% else %}
                            <p class="text-muted text-center mt-3">Nenhum item na venda.</p>
                        {% endfor %}
                        <div class="d-flex justify-content-between mt-3">
                            <h5 class="mb-0">Total</h5>
                            <h5 class="mb-0">R$ {{ total_debitos|number_format(2, ',', '.') }}</h5>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="orcamentos" role="tabpanel" aria-labelledby="orcamentos-tab"><p class="text-muted text-center mt-4">Nenhum orçamento registrado.</p></div>
                </div>
            </div>
        </div>

        <div class="col-lg-5 mb-4 mb-lg-0">
            <div class="main-card">
                <h5 class="mb-4"><i class="fas fa-stream me-2"></i>Linha do Tempo</h5>
                <ul class="timeline">
                    {% for item in timeline_items %}
                        <li class="timeline-item">
                            <div class="timeline-icon">
                                {% if 'Consulta' in item.tipo or 'Retorno' in item.tipo %}<i class="fas fa-stethoscope"></i>
                                {% elseif 'Vacina' in item.tipo %}<i class="fas fa-syringe"></i>
                                {% elseif 'Receita' in item.tipo %}<i class="fas fa-file-prescription"></i>
                                {% else %}C{% endif %}
                            </div>

                            {% set content_classes = '' %}
                            {% if 'Consulta' in item.tipo %}
                                {% set content_classes = 'border-start border-5 border-primary ps-3' %}
                            {% elseif 'Retorno' in item.tipo %}
                                {% set content_classes = 'border-start border-5 border-success ps-3' %}
                            {% elseif 'Vacina' in item.tipo %}
                                {% set content_classes = 'border-start border-5 border-warning ps-3' %}
                            {% elseif 'Receita' in item.tipo %}
                                {% set content_classes = 'border-start border-5 border-purple ps-3' %}
                            {% endif %}
                            
                            <div class="timeline-content {{ content_classes }}">
                                <p class="timeline-date">{{ item.data|date('d/m/Y \\à\\s H:i') }}</p>
                                <a href="#"
                                   class="timeline-link timeline-text d-flex justify-content-between align-items-center"
                                   data-tipo="{{ item.tipo }}"
                                   data-data="{{ item.data|date('d/m/Y \\à\\s H:i') }}"
                                   data-resumo="{{ item.resumo|e('html_attr') }}"
                                   {# Pass different content based on type, ensuring it's always a JSON stringified Delta #}
                                   data-atendimento-delta="{{ item.anamnese | json_encode | e('html_attr') }}"
{#                                    data-receita-cabecalho-delta="{{ item.receita_cabecalho | json_encode | e('html_attr') }}"
                                   data-receita-conteudo-delta="{{ item.receita_conteudo | json_encode | e('html_attr') }}"
                                   data-receita-rodape-delta="{{ item.receita_rodape | json_encode | e('html_attr') }}" #}
                                   {# Add more data attributes for other types if needed (e.g., data-vacina-details) #}
                                   >
                                   <span>{{ item.tipo }}</span>
                                   <small class="text-muted fst-italic me-2">{{ item.resumo|default('Ver detalhes') }}</small>
                                </a>
                            </div>
                        </li>
                    {% else %}
                        <li class="ms-2">Nenhum evento na linha do tempo.</li>
                    {% endfor %}
                </ul>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="main-card">
                 <ul class="nav nav-tabs" id="main-tabs" role="tablist">
                    <li class="nav-item" role="presentation"><button class="nav-link active" data-bs-toggle="tab" data-bs-target="#historico" type="button" role="tab" aria-controls="historico" aria-selected="true"><i class="fas fa-history me-1"></i> Histórico</button></li>
                    <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#protocolos" type="button" role="tab" aria-controls="protocolos" aria-selected="false"><i class="fas fa-file-alt me-1"></i> Protocolos</button></li>
                    <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#agenda" type="button" role="tab" aria-controls="agenda" aria-selected="false"><i class="fas fa-calendar-alt me-1"></i> Agenda</button></li>
                </ul>
                <div class="tab-content pt-4" id="main-tabs-content">
                    <div class="tab-pane fade show active" id="historico" role="tabpanel" aria-labelledby="historico-tab">
                        
                        {# This is the initial view with buttons to add new records #}
                        <div id="action-buttons-view">
                            <h5 class="mb-3">Adicionar Novo Registro</h5>
                            <div class="row action-grid g-3">
                                <div class="col-6 col-md-4"><a href="#" id="btn-novo-atendimento" class="btn btn-primary"><i class="fas fa-briefcase-medical d-block fs-4"></i> Atendimento</a></div>
                                <div class="col-6 col-md-4"><a href="#" id="btn-nova-receita" class="btn text-white" style="background-color: #6f42c1;"><i class="fas fa-file-prescription d-block fs-4"></i> Receita</a></div>
                                <div class="col-6 col-md-4"><a href="#" id="btn-nova-internacao" class="btn text-white" style="background-color: #20c997;"><i class="fas fa-procedures d-block fs-4"></i> Internação</a></div>
                                <div class="col-6 col-md-4"><a href="#" class="btn text-white" style="background-color: #e85d6c;"><i class="fas fa-weight d-block fs-4"></i> Peso</a></div>
                                <div class="col-6 col-md-4"><a href="#" class="btn text-white" style="background-color: #fd7e14;"><i class="fas fa-microscope d-block fs-4"></i> Patologia</a></div>
                                <div class="col-6 col-md-4"><a href="#" class="btn text-white" style="background-color: #e83e8c;"><i class="fas fa-vial d-block fs-4"></i> Exame</a></div>
                                <div class="col-6 col-md-4"><a href="#" class="btn btn-success"><i class="fas fa-file-invoice d-block fs-4"></i> Documento</a></div>
                                <div class="col-6 col-md-4"><a href="#" class="btn text-white" style="background-color: #17a2b8;"><i class="fas fa-camera d-block fs-4"></i> Fotos</a></div>
                                <div class="col-6 col-md-4"><a href="#" class="btn" style="background-color: #ffc107; color: #212529!important;"><i class="fas fa-syringe d-block fs-4"></i> Vacina</a></div>
                            </div>
                        </div>

                        {# Form for new Atendimento #}
                        <div id="atendimento-view" style="display: none;">
                            <form id="form-atendimento" method="POST" action="{{ path('clinica_novo_atendimento', {'petId': pet.id}) }}">
                                <div class="form-view-container">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h5 class="form-view-header">Novo Atendimento</h5>
                                        <button type="button" class="btn-close" id="btn-fechar-atendimento" aria-label="Fechar"></button>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-3"><label class="form-label">Tipo*</label><select class="form-select" name="tipo"><option value="Consulta" selected>Consulta</option><option value="Retorno">Retorno</option></select></div>
                                        <div class="col-md-6 mb-3"><label class="form-label">Resumo (Observações)</label><input type="text" class="form-control" name="observacoes"></div>
                                    </div>
                                    <div class="mb-3"><label class="form-label">Anamnese / Exame Clínico</label><div id="atendimento-editor"></div><input type="hidden" name="anamnese_delta" id="anamnese-input"></div>
                                    <input type="hidden" name="pet_id" value="{{ pet.id }}"><input type="hidden" name="cliente_id" value="{{ pet.dono_id }}"><input type="hidden" name="data" value="{{ "now"|date("Y-m-d") }}"><input type="hidden" name="hora" value="{{ "now"|date("H:i:s") }}">
                                    <div class="d-flex justify-content-end"><button type="submit" class="btn btn-success"><i class="fas fa-save me-1"></i> Salvar Atendimento</button></div>
                                </div>
                            </form>
                        </div>

                        {# Form for new Receita #}
                        <div id="receita-view" style="display: none;">
                             <form id="form-receita" method="POST" action="{{ path('clinica_nova_receita', {'petId': pet.id}) }}">
                                <div class="form-view-container">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h5 class="form-view-header">Emitir Receita</h5>
                                        <button type="button" class="btn-close" id="btn-fechar-receita" aria-label="Fechar"></button>
                                    </div>
                                    <div class="mb-3"><label class="form-label"><strong>🩺 Cabeçalho:</strong></label><div id="editor-cabecalho"></div></div>
                                    <div class="mb-3"><label class="form-label"><strong>📄 Receita:</strong></label><div id="editor-conteudo"></div></div>
                                    <div class="mb-3"><label class="form-label"><strong>📅 Rodapé:</strong></label><div id="editor-rodape"></div></div>
                                    <input type="hidden" name="cabecalho_delta" id="cabecalho-input"><input type="hidden" name="conteudo_delta" id="conteudo-input"><input type="hidden" name="rodape_delta" id="rodape-input">
                                    <div class="d-flex justify-content-end"><button type="submit" class="btn btn-primary"><i class="fas fa-print me-1"></i> Imprimir / Salvar PDF</button></div>
                                </div>
                            </form>
                        </div>
                        
                        {# NEW: Main container for displaying ALL service details #}
                        <div id="service-display-container" style="display: none;">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="card-title mb-0" id="service-display-title">Detalhes do Registro</h5>
                                <button type="button" class="btn-close" id="btn-fechar-service-display" aria-label="Fechar"></button>
                            </div>
                            
                            {# This is where individual service detail cards will be dynamically inserted #}
                            <div id="service-details-content">
                                {# Example: 
                                <div class="service-detail-card border-primary">
                                    <h6>Consulta - Resumo do Atendimento</h6>
                                    <div id="anamnese-content-for-this-card"></div>
                                </div>
                                #}
                            </div>
                        </div>

                    </div>
                    <div class="tab-pane fade" id="protocolos" role="tabpanel" aria-labelledby="protocolos-tab"><p class="text-muted text-center mt-4">Conteúdo de Protocolos.</p></div>
                    <div class="tab-pane fade" id="agenda" role="tabpanel" aria-labelledby="agenda-tab"><p class="text-muted text-center mt-4">Conteúdo da Agenda.</p></div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // --- UI Element Selectors ---
        const actionButtonsView = document.getElementById('action-buttons-view');
        const atendimentoView = document.getElementById('atendimento-view');
        const receitaView = document.getElementById('receita-view');
        const serviceDisplayContainer = document.getElementById('service-display-container'); // The main quadro
        const serviceDetailsContent = document.getElementById('service-details-content');   // Area inside the main quadro

        const btnNovoAtendimento = document.getElementById('btn-novo-atendimento');
        const btnNovaReceita = document.getElementById('btn-nova-receita');
        
        const btnFecharAtendimento = document.getElementById('btn-fechar-atendimento');
        const btnFecharReceita = document.getElementById('btn-fechar-receita');
        const btnFecharServiceDisplay = document.getElementById('btn-fechar-service-display'); // New close button for service display

        const historicoTabElement = document.querySelector('button[data-bs-target="#historico"]');
        let historicoTab = null;
        if (historicoTabElement) {
            historicoTab = new bootstrap.Tab(historicoTabElement);
        }

        // --- View Management ---
        const showView = (viewToShow) => {
            // Hide all potential views first
            if (actionButtonsView) actionButtonsView.style.display = 'none';
            if (atendimentoView) atendimentoView.style.display = 'none';
            if (receitaView) receitaView.style.display = 'none';
            if (serviceDisplayContainer) serviceDisplayContainer.style.display = 'none';

            // Show the requested view
            if (viewToShow) { viewToShow.style.display = 'block'; }
        };

        // --- Event Listeners for Buttons ---
        const returnToActionGrid = (e) => {
            if (e) e.preventDefault();
            showView(actionButtonsView);
        };
        if (btnNovoAtendimento) btnNovoAtendimento.addEventListener('click', (e) => { e.preventDefault(); showView(atendimentoView); });
        if (btnNovaReceita) btnNovaReceita.addEventListener('click', (e) => { e.preventDefault(); showView(receitaView); });
        
        if (btnFecharAtendimento) btnFecharAtendimento.addEventListener('click', returnToActionGrid);
        if (btnFecharReceita) btnFecharReceita.addEventListener('click', returnToActionGrid);
        if (btnFecharServiceDisplay) btnFecharServiceDisplay.addEventListener('click', returnToActionGrid); // Set up new close button

        // --- Quill Editor Initialization (for creating/editing forms) ---
        const toolbarOptions = [
            [{ 'header': [1, 2, 3, false] }],
            ['bold', 'italic', 'underline', 'strike'],
            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
            ['link'],
            ['clean']
        ];
        const createQuillEditor = (selector, options = {}) => {
            const element = document.querySelector(selector);
            if (!element) return null; // Ensure element exists
            return new Quill(selector, { theme: 'snow', modules: { toolbar: toolbarOptions }, ...options });
        };
        
        // Editors for creating new records
        const quillAtendimento = createQuillEditor('#atendimento-editor');
        const quillCabecalho = createQuillEditor('#editor-cabecalho');
        const quillConteudo  = createQuillEditor('#editor-conteudo');
        const quillRodape    = createQuillEditor('#editor-rodape');

        // Initial content for new record forms
        if (quillAtendimento) {
            quillAtendimento.setContents([
                { insert: 'Anamnese:', attributes: { bold: true } },
                { insert: '\nQueixa principal:\n\n' },
                { insert: 'Exame Clínico:', attributes: { bold: true } },
                { insert: '\n' }
            ]);
        }
        if (quillCabecalho) {
            quillCabecalho.setContents([
                { insert: 'Nome do Veterinário(a)', attributes: { header: 2 } },
                { insert: '\nCRMV - Especialidade\n' }
            ]);
        }
        if (quillRodape) {
            quillRodape.setContents([
                { insert: 'Data: ', attributes: { bold: true } },
                { insert: '{{ "now"|date("d/m/Y") }}\n' }
            ]);
        }
        
        // --- Timeline Logic to Display Service Details ---
        const timelineLinks = document.querySelectorAll('.timeline-link');
        timelineLinks.forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                
                const tipo = this.dataset.tipo;
                const data = this.dataset.data;
                const resumo = this.dataset.resumo;
                
                // Clear previous content in the display area
                serviceDetailsContent.innerHTML = '';
                
                // Update the header of the main service display container
                document.getElementById('service-display-title').textContent = `Detalhes do Registro: ${tipo}`;

                let contentHtml = '';
                let borderColorClass = '';
                let currentQuillEditors = []; // To keep track of Quill instances created for display

                // Dynamically build the content based on the service type
                if (tipo === 'Consulta' || tipo === 'Retorno') {
                    const anamneseDeltaString = this.dataset.atendimentoDelta;
                    borderColorClass = (tipo === 'Consulta') ? 'border-primary' : 'border-success';

                    contentHtml = `
                        <div class="service-detail-card ${borderColorClass}">
                            <h6 class="mb-2">${tipo} - ${resumo}</h6>
                            <p class="text-muted mb-3"><small>Registrado em: ${data}</small></p>
                            <label class="form-label"><strong>Anamnese / Exame Clínico:</strong></label>
                            <div id="anamnese-display-quill" class="service-detail-content"></div>
                        </div>
                    `;
                    serviceDetailsContent.innerHTML = contentHtml; // Insert the new structure
                    
                    // Initialize a read-only Quill editor for this specific content area
                    const quillDisplayAnamnese = new Quill('#anamnese-display-quill', {
                        theme: 'bubble', // A cleaner theme for display
                        readOnly: true,
                        modules: { toolbar: false } // No toolbar needed for display
                    });
                    currentQuillEditors.push(quillDisplayAnamnese); // Store reference
                    
                    if (anamneseDeltaString) {
                        try {
                            const anamneseDelta = JSON.parse(anamneseDeltaString);
                            quillDisplayAnamnese.setContents(anamneseDelta);
                        } catch (error) {
                            console.error('Erro ao parsear Delta da anamnese:', error);
                            quillDisplayAnamnese.setText('Conteúdo da anamnese não disponível ou formato inválido.');
                        }
                    } else {
                        quillDisplayAnamnese.setText('Nenhuma anamnese detalhada disponível.');
                    }

                } else if (tipo === 'Receita') {
                    const cabecalhoDeltaString = this.dataset.receitaCabecalhoDelta;
                    const conteudoDeltaString = this.dataset.receitaConteudoDelta;
                    const rodapeDeltaString = this.dataset.receitaRodapeDelta;
                    borderColorClass = 'border-purple'; // Custom purple for recipes

                    contentHtml = `
                        <div class="service-detail-card ${borderColorClass}">
                            <h6 class="mb-2">Receita Médica - ${resumo}</h6>
                            <p class="text-muted mb-3"><small>Emitida em: ${data}</small></p>
                            <div class="mb-3">
                                <label class="form-label"><strong>Cabeçalho:</strong></label>
                                <div id="receita-cabecalho-display-quill" class="service-detail-content"></div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label"><strong>Conteúdo da Receita:</strong></label>
                                <div id="receita-conteudo-display-quill" class="service-detail-content"></div>
                            </div>
                            <div>
                                <label class="form-label"><strong>Rodapé:</strong></label>
                                <div id="receita-rodape-display-quill" class="service-detail-content"></div>
                            </div>
                            <button class="btn btn-sm btn-outline-primary mt-3"><i class="fas fa-print me-1"></i> Imprimir Receita</button>
                        </div>
                    `;
                    serviceDetailsContent.innerHTML = contentHtml; // Insert the new structure

                    // Initialize read-only Quill editors for each part of the recipe
                    const quillDisplayReceitaCabecalho = new Quill('#receita-cabecalho-display-quill', { theme: 'bubble', readOnly: true, modules: { toolbar: false } });
                    const quillDisplayReceitaConteudo = new Quill('#receita-conteudo-display-quill', { theme: 'bubble', readOnly: true, modules: { toolbar: false } });
                    const quillDisplayReceitaRodape = new Quill('#receita-rodape-display-quill', { theme: 'bubble', readOnly: true, modules: { toolbar: false } });
                    
                    currentQuillEditors.push(quillDisplayReceitaCabecalho, quillDisplayReceitaConteudo, quillDisplayReceitaRodape); // Store references

                    // Load content into recipe editors
                    try {
                        if (cabecalhoDeltaString) quillDisplayReceitaCabecalho.setContents(JSON.parse(cabecalhoDeltaString));
                        if (conteudoDeltaString) quillDisplayReceitaConteudo.setContents(JSON.parse(conteudoDeltaString));
                        if (rodapeDeltaString) quillDisplayReceitaRodape.setContents(JSON.parse(rodapeDeltaString));
                    } catch (error) {
                        console.error('Erro ao parsear Delta da receita:', error);
                        // Optionally set text indicating error
                    }

                } else if (tipo === 'Vacina') {
                    // Example for Vacina (you'll need to pass vaccine details as data attributes from your backend)
                    const vacinaDetails = 'Detalhes da Vacina (Nome da vacina, Lote, Próxima dose: DD/MM/AAAA)'; // Replace with actual data attribute
                    borderColorClass = 'border-warning';
                    contentHtml = `
                        <div class="service-detail-card ${borderColorClass}">
                            <h6 class="mb-2">Vacina Aplicada - ${resumo}</h6>
                            <p class="text-muted mb-3"><small>Data: ${data}</small></p>
                            <p>${vacinaDetails}</p>
                            <button class="btn btn-sm btn-outline-warning mt-3"><i class="fas fa-syringe me-1"></i> Registrar Próxima Vacina</button>
                        </div>
                    `;
                    serviceDetailsContent.innerHTML = contentHtml;

                } else {
                    // Default for other types or if specific content is missing
                    borderColorClass = 'border-secondary'; // A neutral color for generic types
                    contentHtml = `
                        <div class="service-detail-card ${borderColorClass}">
                            <h6 class="mb-2">${tipo} - ${resumo}</h6>
                            <p class="text-muted mb-3"><small>Data: ${data}</small></p>
                            <p>Nenhum detalhe específico disponível para este tipo de registro no momento.</p>
                        </div>
                    `;
                    serviceDetailsContent.innerHTML = contentHtml;
                }
                
                // Ensure "Histórico" tab is active and then show the main service display container
                if (historicoTab) historicoTab.show();
                showView(serviceDisplayContainer);
            });
        });

        // --- Form Submission Logic for Quill Content (Delta) ---
        // This part saves the rich text content from Quill editors into hidden input fields
        const setupFormSubmission = (formId, editorsMap) => {
            const form = document.getElementById(formId);
            if (form) {
                form.addEventListener('submit', function() {
                    for (const inputId in editorsMap) {
                        const input = document.getElementById(inputId);
                        const quillInstance = editorsMap[inputId];
                        if (input && quillInstance) {
                            // Save Quill content as JSON stringified Delta
                            input.value = JSON.stringify(quillInstance.getContents());
                        }
                    }
                });
            }
        };
        setupFormSubmission('form-atendimento', {'anamnese-input': quillAtendimento});
        setupFormSubmission('form-receita', {
            'cabecalho-input': quillCabecalho,
            'conteudo-input': quillConteudo,
            'rodape-input': quillRodape
        });

    });
    </script>
{% endblock %}